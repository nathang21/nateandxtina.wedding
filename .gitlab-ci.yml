image: node:alpine
stages:
 - build
 - test
 - deploy
 - monitor

cache:   
  paths:   
    - node_modules/
  key: ${CI_COMMIT_REF_SLUG}

# build Stage
build:
  stage: build
  artifacts:
    paths:
      - public/
  script: npm install

# code_quality:
#   stage: test
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --env SOURCE_CODE="$PWD"
#         --volume "$PWD":/code
#         --volume /var/run/docker.sock:/var/run/docker.sock
#         "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
#   artifacts:
#     paths: [gl-code-quality-report.json]

# # test Stage
# sast:
#   stage: test
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
#         --volume "$PWD:/code"
#         --volume /var/run/docker.sock:/var/run/docker.sock
#         "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
#   artifacts:
#     paths: [gl-sast-report.json]

# dependency_scanning:
#   stage: test
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
#         --volume "$PWD:/code"
#         --volume /var/run/docker.sock:/var/run/docker.sock
#         "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
#   artifacts:
#     paths: [gl-dependency-scanning-report.json]
       
# deploy stage
deploy-staging:
  stage: deploy
  environment:
   name: staging
   url: https://$CI_ENVIRONMENT_NAME.$PROJECT_DOMAIN
  only:
   - staging
  script:
    - npm run predeploy && npm run deploy

deploy-production:
  stage: deploy
  environment:
   name: production
   url: https://$PROJECT_DOMAIN
  only:
     - master
  script:
     - npm run predeploy && npm run deploy

# monitor stage
# dast:
#   stage: monitor
#   environment:
#    name: production
#   image: registry.gitlab.com/gitlab-org/security-products/zaproxy
#   variables:
#     website: "https://$PROJECT_DOMAIN"
#   allow_failure: true
#   only:
#     - production
#   script:
#     - mkdir /zap/wrk/
#     - /zap/zap-baseline.py -J gl-dast-report.json -t $website || true
#     - cp /zap/wrk/gl-dast-report.json .
#   artifacts:
#     paths: [gl-dast-report.json]

# Blocked by https://gitlab.com/gitlab-org/gitlab-ce/issues/31379
# performance: 
#   stage: monitor
#   image: docker:git
#   variables:
#     URL: https://$PROJECT_DOMAIN
#   services:
#     - docker:stable-dind
#   only:
#     - production
#     script:
#     - mkdir gitlab-exporter
#     - wget -O ./gitlab-exporter/index.js https://gitlab.com/gitlab-org/gl-performance/raw/master/index.js
#     - mkdir sitespeed-results
#     - docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:6.3.1 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results $URL
#     - mv sitespeed-results/data/performance.json performance.json
#   artifacts:
#     paths:
#     - performance.json
#     - sitespeed-results/